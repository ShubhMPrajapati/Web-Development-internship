"function" != typeof Object.create && (Object.create = function (a) {
    function b() {}
    return b.prototype = a, new b;
});
$(document).ready(function() {
  var heroTitle = $('.thumbnails-hero__title');
  heroTitle.addClass('slideup');
});
const overlayContainer = document.querySelector('.overlay-container');
const overlayContent = document.querySelector('.overlay-content');

// Mousemove event to track mouse position
overlayContainer.addEventListener('mousemove', function (e) {
  const mouseX = e.clientX - overlayContainer.getBoundingClientRect().left;
  const mouseY = e.clientY - overlayContainer.getBoundingClientRect().top;

  // Set the size of the reveal (5cm radius = approximately 189px)
  const size = 400;

  // Create a circular clip path effect based on mouse position
  overlayContent.style.clipPath = `circle(${size / 2}px at ${mouseX}px ${mouseY}px)`;

  // Optionally, make the text color visible gradually
  overlayContent.style.color = '#333'; // Make the text color visible
});

// Optional: Hide the text when the mouse is not hovered or outside
overlayContainer.addEventListener('mouseleave', function () {
  overlayContent.style.color = 'transparent'; // Hide text
});



document.querySelectorAll('.corner-image').forEach(function (cornerImage) {
    let lastX = 0;
    let lastY = 0;
    cornerImage.addEventListener('mouseenter', function (event) {
        
        this.style.zIndex = 10;

        document.querySelector('.tm-hero-text-container h2').style.color = '#212121';

        document.querySelectorAll('.corner-image').forEach(function (otherImage) {
            if (otherImage !== cornerImage) {
                otherImage.style.border = '1px solid white';
            }
        });
        document.querySelector('.tm-hero-text-container h2').style.textShadow = '1px 1px 0px #aaa, -1px -1px 0px #aaa, 1px -1px 0px #aaa, -1px 1px 0px #aaa';

    // Apply the white border to the hovered corner image
      this.addEventListener('mousemove', function (e) {
        const mouseX = e.clientX;
        const mouseY = e.clientY;
        const rect = this.getBoundingClientRect();
        const offsetX = mouseX - rect.left;
        const offsetY = mouseY - rect.top;
        const centerX = rect.width / 2;
        const centerY = rect.height / 2;
        const moveX = (offsetX - centerX) * 0.6;
        const moveY = (offsetY - centerY) * 0.6;
        
        function updateTransform() {
          const deltaX = moveX - lastX;
          const deltaY = moveY - lastY;
  
          lastX += deltaX * 1; 
          lastY += deltaY * 1;
  
          cornerImage.style.transform = `translate(${lastX}px, ${lastY}px)`;
          requestAnimationFrame(updateTransform);
        }
  
        requestAnimationFrame(updateTransform);
      });
  
      this.addEventListener('mouseleave', function () {
        cornerImage.style.transform = 'translate(0, 0)';
        lastX = 0;
        lastY = 0;
        this.style.zIndex = 1;
        document.querySelector('.tm-hero-text-container h2').style.color = 'white';
          document.querySelectorAll('.corner-image').forEach(function (otherImage) {
              otherImage.style.border = '';
          });
      });
    });
  });
  
window.addEventListener('load', function () {
    const images = document.querySelectorAll('.corner-image');
  
    // Add the 'show' class to each image
    images.forEach(function(image) {
      image.classList.add('show');
    });
  document.querySelector('.thumbnails-hero__title').classList.add('slide-up-animation');
});

(function (a, b, c, d) {
    "use strict";

    var e = {
        init: function (c, d) {
            this.options = a.extend({}, a.fn.singlePageNav.defaults, c);
            this.container = d;
            this.$container = a(d);
            this.$links = this.$container.find("a");
            if ("" !== this.options.filter) {
                this.$links = this.$links.filter(this.options.filter);
            }
            this.$window = a(b);
            this.$htmlbody = a("html, body");
            this.$links.on("click.singlePageNav", a.proxy(this.handleClick, this));
            this.didScroll = !1;
            this.checkPosition();
            this.setTimer();
        },

        handleClick: function (b) {
            var c = this,
                d = b.currentTarget,
                e = a(d.hash);
            b.preventDefault();

            if (e.length) {
                c.clearTimer();
                if ("function" == typeof c.options.beforeStart) c.options.beforeStart();
                c.setActiveLink(d.hash);
                c.scrollTo(e, function () {
                    if (c.options.updateHash && history.pushState) {
                        history.pushState(null, null, d.hash);
                    }
                    c.setTimer();
                    if ("function" == typeof c.options.onComplete) c.options.onComplete();
                });
            }
        },

        scrollTo: function (a, b) {
            var c = this,
                d = c.getCoords(a).top,
                e = !1;

            c.$htmlbody.stop().animate({
                scrollTop: d
            }, {
                duration: c.options.speed,
                easing: c.options.easing,
                complete: function () {
                    if ("function" != typeof b || e) return;
                    e = !0;
                    b();
                }
            });
        },

        setTimer: function () {
            var a = this;
            a.$window.on("scroll.singlePageNav", function () {
                a.didScroll = !0;
            });
            a.timer = setInterval(function () {
                if (a.didScroll) {
                    a.didScroll = !1;
                    a.checkPosition();
                }
            }, 250);
        },

        clearTimer: function () {
            clearInterval(this.timer);
            this.$window.off("scroll.singlePageNav");
            this.didScroll = !1;
        },

        checkPosition: function () {
            var a = this.$window.scrollTop(),
                b = this.getCurrentSection(a);

            if (b !== null) {
                this.setActiveLink(b);
            }
        },

        getCoords: function (a) {
            return {
                top: Math.round(a.offset().top) - this.options.offset
            };
        },

        setActiveLink: function (a) {
            var b = this.$container.find("a[href$='" + a + "']");
            if (!b.hasClass(this.options.currentClass)) {
                this.$links.removeClass(this.options.currentClass);
                b.addClass(this.options.currentClass);
            }
        },

        getCurrentSection: function (d) {
            var e, f, g, h;
            for (e = 0; e < this.$links.length; e++) {
                f = this.$links[e].hash;
                if (a(f).length) {
                    g = this.getCoords(a(f));
                    if (d >= g.top - this.options.threshold) {
                        h = f;
                    }
                }
            }

            var i = a(c).height() - a(b).height();
            if (d == i) {
                var j = this.$links.length;
                if (j > 0) {
                    h = this.$links[j - 1].hash;
                }
            }

            return h || (0 === this.$links.length ? null : this.$links[0].hash);
        }
    };

    a.fn.singlePageNav = function (a) {
        return this.each(function () {
            var b = Object.create(e);
            b.init(a, this);
        });
    };

    a.fn.singlePageNav.defaults = {
        offset: 0,
        threshold: 120,
        speed: 400,
        currentClass: "current",
        easing: "swing",
        updateHash: !1,
        filter: "",
        onComplete: !1,
        beforeStart: !1
    };

})(jQuery, window, document);
